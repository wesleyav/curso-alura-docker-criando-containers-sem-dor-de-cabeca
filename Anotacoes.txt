# Donwload do Docker for Windows
# https://desktop.docker.com/win/stable/Docker%20Desktop%20Installer.exe

# Requisitos para instalação do Docker no Windows:
# Arquitetura 64 bits
# Versão Pro, Enterprise ou Education.
# Virtualização habilitada
# Necessário habilitar Hyper-V

# Verificar versão
$ docker version

# Realizar o "Hello World"
$ docker run hello-world

# Utilizando o Play With Docker	(caso haja problemas em instalar o docker na máquina)
# https://labs.play-with-docker.com/

#################################################

# Links úteis:
# https://hub.docker.com/

# Baixar imagem do ubuntu
$ docker run ubuntu

# Exibir containers ativos:
$ docker ps

# Exibir todos os containers criados e inclusive os parados:
$ docker ps -a

# Associar o terminal ao temrinal da imagem usada:
$ docker run -it ubuntu

# Subir a imagem
# docker start + id do container
$ docker start 

# Parar imagem
# docker stop + id do container
$ docker stop 

# Iniciar a imagem e já associar o terminal ao da imagem usada
# docker start -a -i + id do container

#################################################

# Remover o container
# docker rm + id do container
$ docker rm 

# Remover containers inativos
$ docker container prune

# Exibir imagens
$ docker images

# Remover imagens
# docker rmi + nome da imagem
$ docker rmi hello-world

# Baixar imagem com versão
$ docker run ubuntu:14.04

#################################################

# Criar um container estático (imagem de um usuário)
$ docker run dockersamples/static-site

# Criar um container estático (imagem de um usuário) sem travar o terminal
$ docker run -d dockersamples/static-site

# Parar container com zero segundos
# docker stop -t 0 + id
$ docker stop -t 0 ca8

# Linkar porta interna do container para ser acessada pela máquina externa (PC) deixando o docker atribuir uma porta automaticamente (parâmetro -P)
$ docker run -d -P dockersamples/static-site

# Visualizar portas do container
# docker port + id do container
$ docker port + ca8
# Acessar no navegador localhost + porta que apresenta na saída do comando anterior
# localhost:55002

# Visualizar ip se estiver usando docker tool box
$ docker-machine ip

# Criar um container estático definindo nome 
$ docker run -d -P --name meu-site dockersamples/static-site

# Parar container nomeado
$ docker stop meu-site

# Criando container e definindo porta manualmente (parâmetro -p)
$ docker run -d -p 12345:80 dockersamples/static-site

# Visualizar portas do container
# docker port + id do container
$ docker port + ca8

# Acessar no navegador localhost + porta que apresenta na saída do comando anterior
# localhost:12345

# Criando container, definindo porta manualmente e criando variável de ambiente (aparece na tela inicial)
$ docker run -d -P -e AUTHOR=Container UP OK!" dockersamples/static-site

# Listar id dos containers
$ docker ps -q

# Parar mais de um container pelo id
$ docker stop -t 0 $(docker ps -q)

#################################################

# Criar container baseado na imagem do ubuntu (local do volume criado automaticamente pelo docker)
$ docker run -v "/var/www" ubuntu

# Inspecionar o volume criado
# docker inspect + id
$ docker inspect 3d6106c3cc31

# Criando container especificando local do volume:
$ docker run -it -v "C:\Users\Wesley\Desktop:/var/www" ubuntu

# Após o comando anterior, criar um documento com:
$ touch primeiro-arquivo.txt

# Editar esse arquivo:
$ echo "Este arquivo foi criado dentro de um volume usando Docker"

# Remover container
$ docker container prune
# Após a exclusão do container, os dados permanecem na pasta desktop que foi mapeada (Volume)

#################################################

# Criando container, exibindo código rodando Node, utilizando volume
$ docker run -d -p 8080:3000 -v "C:\Users\Wesley\Desktop\volume-exemplo:/var/www" -w "/var/www" node npm start

# Acessar no navegador:
# http://localhost:8080/

#################################################

# Criar na pasta do projeto (C:\Users\Wesley\Desktop\volume-exemplo) um arquivo chamado Dockerfile contendo:
FROM node:latest
LABEL maintainer="Douglas Quintanilha"
ENV NODE_ENV=production
ENV PORT=3000
COPY . /var/www
WORKDIR /var/www
RUN npm install
ENTRYPOINT ["npm", "start"]
EXPOSE $PORT

# Criar a imagem a partir do dockerfile (build)
# docker build -f + nome do arquivo do dockerfile -t douglas/node
# Abrir o PowerShell dentro da pasta do projeto e executar:
$ docker build -f Dockerfile -t douglasq/node .

# Visualizar imagens criadas
$ docker images

# Para e remove o container
# docker rm -f + id do container
$ docker rm -f 1av

# Executar nova imagem que foi criada
$ docker run -d -p 8080:3000 douglasq/node

# Acessar no va navegador:
# http://localhost:8080/

#################################################

# Acessar Docker Hub (criar conta)
# https://hub.docker.com

# No PowerShell, logar com sua conta:
$ docker login
# Inserir usuário e senha

# Subir imagem para o repositório
# docker push + nome
$ docker push douglasq/node

# Acessar conta do Docker Hub e verificar imagem salva

# Para baixar a imagem:
# docker pull + nome da imagem (pull baixa, run baixa e roda)
$ docker pull douglasq/node

#################################################

# Subir container
$ docker run -it ubuntu

# Verificar ip
$ hostname -i

# Criar network
$ docker network create --driver bridge minha-rede

# Listar os nomes da rede
$ docker network ls

# Criar container e atrelar a uma detemrinada rede
$ docker run -it --name meu-container-de-ubuntu --network minha-rede ubuntu

# Inspecionar 
$ docker inspect meu-container-de-ubuntu

#################################################

# Construir projeto
# Baixar imagem alura-books:cap05
$ docker pull douglasq/alura-books:cap05

# Baixar Mongo
$ docker pull mongo

# Subir container meu mongo
$ docker run -d --name meu-mongo --network minha-rede mongo

# Subir container
$ docker run --network minha-rede -d -p 8080:3000 douglasq/alura-books:cap05

# Acessar no navegador:
# http://localhost:8080
# http://localhost:8080/seed
# http://localhost:8080

#################################################

# Baixar uma imagem de um usuário especifico:
$ docker pull NOME_USUARIO/NOME_IMAGEM

#################################################

# Criando docker-compose.yml

### inicio ###

version: '3'
services: 
  nginx:
    build: 
      dockerfile: ./docker/nginx.dockerfile
      context: .
    image: douglasq/nginx
    container_name: nginx
    port:
      - "80:80"
    networks: 
      - production-network
    depends_on: 
      - "node1"
      - "node2"
      - "node3"

  mongodb:
    image: mongo
    networks: 
      - production-network

  node1:
    build: 
      dockerfile: ./docker/alura-books.dockerfile
      context: .
    image: douglasq/alura-books
    container_name: alura-books1
    port:
      - "3000"
    networks: 
      - production-network
    depends_on: "mongodb"

  node2:
    build: 
      dockerfile: ./docker/alura-books.dockerfile
      context: .
    image: douglasq/alura-books
    container_name: alura-books2
    port:
      - "3000"
    networks: 
      - production-network
    depends_on: "mongodb"

  node3:
    build: 
      dockerfile: ./docker/alura-books.dockerfile
      context: .
    image: douglasq/alura-books
    container_name: alura-books3
    port:
      - "3000"
    networks: 
      - production-network
    depends_on: "mongodb"

networks: 
  production-network:
    driver: bridge

### fim ###

#################################################

# Build das imagens a partir do docker-compose
$ docker-compose build

# Visualizar imagens
$ docker images

# Executa o docker-compose.yml e roda todos os serviços configurados
$ docker-compose up

# Acessar no navegador:
# http://localhost:8080
# http://localhost:8080/seed
# http://localhost:8080

# Executa o docker-compose.yml e roda todos os serviços configurados e libera o terminal
$ docker-compose up -d

# Lista os serviços ativos
$ docker-compose ps

# Para os serviços
$ docker-compose down

# Testando conectividade entre containers
$ docker exec -it alura-books-1 ping alura-books-2

# Testando conectividade entre containers pelo nome do serviço
$ docker exec -it alura-books-1 ping node2

#################################################