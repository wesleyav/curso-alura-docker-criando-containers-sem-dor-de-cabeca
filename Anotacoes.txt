# Donwload do Docker for Windows
# https://desktop.docker.com/win/stable/Docker%20Desktop%20Installer.exe

# Requisitos para instalação do Docker no Windows:
# Arquitetura 64 bits
# Versão Pro, Enterprise ou Education.
# Virtualização habilitada
# Necessário habilitar Hyper-V

# Verificar versão
$ docker version

# Realizar o "Hello World"
$ docker run hello-world

# Utilizando o Play With Docker	(caso haja problemas em instalar o docker na máquina)
# https://labs.play-with-docker.com/

#################################################

# Links úteis:
# https://hub.docker.com/

# Baixar imagem do ubuntu
$ docker run ubuntu

# Exibir containers ativos:
$ docker ps

# Exibir todos os containers criados e inclusive os parados:
$ docker ps -a

# Associar o terminal ao temrinal da imagem usada:
$ docker run -it ubuntu

# Subir a imagem
# docker start + id do container
$ docker start 

# Parar imagem
# docker stop + id do container
$ docker stop 

# Iniciar a imagem e já associar o terminal ao da imagem usada
# docker start -a -i + id do container

#################################################

# Remover o container
# docker rm + id do container
$ docker rm 

# Remover containers inativos
$ docker container prune

# Exibir imagens
$ docker images

# Remover imagens
# docker rmi + nome da imagem
$ docker rmi hello-world

# Baixar imagem com versão
$ docker run ubuntu:14.04

#################################################

# Criar um container estático (imagem de um usuário)
$ docker run dockersamples/static-site

# Criar um container estático (imagem de um usuário) sem travar o terminal
$ docker run -d dockersamples/static-site

# Parar container com zero segundos
# docker stop -t 0 + id
$ docker stop -t 0 ca8

# Linkar porta interna do container para ser acessada pela máquina externa (PC) deixando o docker atribuir uma porta automaticamente (parâmetro -P)
$ docker run -d -P dockersamples/static-site

# Visualizar portas do container
# docker port + id do container
$ docker port + ca8
# Acessar no navegador localhost + porta que apresenta na saída do comando anterior
# localhost:55002

# Visualizar ip se estiver usando docker tool box
$ docker-machine ip

# Criar um container estático definindo nome 
$ docker run -d -P --name meu-site dockersamples/static-site

# Parar container nomeado
$ docker stop meu-site

# Criando container e definindo porta manualmente (parâmetro -p)
$ docker run -d -p 12345:80 dockersamples/static-site

# Visualizar portas do container
# docker port + id do container
$ docker port + ca8

# Acessar no navegador localhost + porta que apresenta na saída do comando anterior
# localhost:12345

# Criando container, definindo porta manualmente e criando variável de ambiente (aparece na tela inicial)
$ docker run -d -P -e AUTHOR=Container UP OK!" dockersamples/static-site

# Listar id dos containers
$ docker ps -q

# Parar mais de um container pelo id
$ docker stop -t 0 $(docker ps -q)

#################################################

# Criar container baseado na imagem do ubuntu (local do volume criado automaticamente pelo docker)
$ docker run -v "/var/www" ubuntu

# Inspecionar o volume criado
# docker inspect + id
$ docker inspect 3d6106c3cc31

# Criando container especificando local do volume:
$ docker run -it -v "C:\Users\Wesley\Desktop:/var/www" ubuntu

# Após o comando anterior, criar um documento com:
$ touch primeiro-arquivo.txt

# Editar esse arquivo:
$ echo "Este arquivo foi criado dentro de um volume usando Docker"

# Remover container
$ docker container prune
# Após a exclusão do container, os dados permanecem na pasta desktop que foi mapeada (Volume)

#################################################

# Criando container, exibindo código rodando Node, utilizando volume
$ docker run -d -p 8080:3000 -v "C:\Users\Wesley\Desktop\volume-exemplo:/var/www" -w "/var/www" node npm start

# Acessar no navegador:
# http://localhost:8080/

#################################################